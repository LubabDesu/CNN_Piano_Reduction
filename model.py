import torch
import torch.nn as nn

class PianoReductionCNN(nn.Module) :
    def __init__(self) :
        super(PianoReductionCNN, self).__init_()

        #Down-Conv
        self.conv1 = nn.Conv(4, 48, kernel_size=(5,5), stride=(2,2), padding=2)
        self.relu1 = nn.ReLU()
        self.conv2 = nn.Conv2d(48, 128, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu2 = nn.ReLU()
        self.conv3 = nn.Conv2d(128, 256, kernel_size=(3,3), stride=(2,2), padding=1)
        self.relu3 = nn.ReLU()
        self.conv4 = nn.Conv2d(256, 256, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu4 = nn.ReLU()
        self.conv5 = nn.Conv2d(256, 256, kernel_size=(3,3), stride=(2,2), padding=1)
        self.relu5 = nn.ReLU()
        self.conv6 = nn.Conv2d(256, 512, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu6 = nn.ReLU()
        self.conv7 = nn.Conv2d(512, 1024, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu7 = nn.ReLU()
        self.conv8 = nn.Conv2d(1024, 1024, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu8 = nn.ReLU()
        self.conv9 = nn.Conv2d(1024, 512, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu9 = nn.ReLU()
        self.upconv1 = nn.ConvTranspose2d(512, 256, kernel_size=(4,4), stride=(2,2), padding=1, output_padding=1)
        self.relu10 = nn.ReLU()
        self.conv10 = nn.Conv2d(256, 256, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu11 = nn.ReLU()
        self.upconv2 = nn.ConvTranspose2d(256, 128, kernel_size=(4,4), stride=(2,2), padding=1, output_padding=1)
        self.relu12 = nn.ReLU()
        self.conv11 = nn.Conv2d(128, 128, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu13 = nn.ReLU()
        self.upconv3 = nn.ConvTranspose2d(128, 48, kernel_size=(4,4), stride=(2,2), padding=1, output_padding=1)
        self.relu14 = nn.ReLU()
        self.conv12 = nn.Conv2d(48, 24, kernel_size=(3,3), stride=(1,1), padding=1)
        self.relu15 = nn.ReLU()
        self.conv13 = nn.Conv2d(24, 1, kernel_size=(3,3), stride=(1,1), padding=1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.relu1(self.conv1(x))
        x = self.relu2(self.conv2(x))
        x = self.relu3(self.conv3(x))
        x = self.relu4(self.conv4(x))
        x = self.relu5(self.conv5(x))
        x = self.relu6(self.conv6(x))
        x = self.relu7(self.conv7(x))
        x = self.relu8(self.conv8(x))
        x = self.relu9(self.conv9(x))
        x = self.relu10(self.upconv1(x))
        x = self.relu11(self.conv10(x))
        x = self.relu12(self.upconv2(x))
        x = self.relu13(self.conv11(x))
        x = self.relu14(self.upconv3(x))
        x = self.relu15(self.conv12(x))
        x = self.sigmoid(self.conv13(x))
        return x
